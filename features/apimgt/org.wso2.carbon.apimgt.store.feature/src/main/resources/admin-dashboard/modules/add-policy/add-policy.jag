<%
var log = new Log();

var addPolicy = function (tierName, conditionsArray, defaultRequestCount,defaultUnitTime,defaultTimeUnit) {
    try {
        var provider = jagg.getUser().username;
        var APIProviderImpl = Packages.org.wso2.carbon.apimgt.impl.APIProviderImpl;
        var apiProvider = new APIProviderImpl(provider);

        //var policy = constructPolicyObject(tierName, conditionsArray, defaultRequestCount,defaultUnitTime,defaultTimeUnit);

        //apiProvider.addPolicy(policy);

        return {
            error: false
        };
    } catch (ex) {
        var errorMessage = "Error occurred while saving tier (Cause:" + ex.message + ")";
        log.error(errorMessage);
        return {
            error: true,
            message: errorMessage
        };
    }
};

var constructPolicyObject  = function(tierName, conditionsArray, defaultRequestCount,defaultUnitTime,defaultTimeUnit){
    var Policy = Packages.org.wso2.carbon.apimgt.api.model.Policy;
    var Condition = Packages.org.wso2.carbon.apimgt.api.model.Condition;
    var ArrayList = Packages.java.util.ArrayList;

    var policy = new Policy(tierName);

    policy.setPolicyName(tierName);
    policy.setDefaultRequestCount(defaultRequestCount);
    policy.setDefaultUnitTime(defaultUnitTime);
    policy.setDefaultTimeUnit(defaultTimeUnit);

    var conditions = new ArrayList();
    for(var i in conditionsArray){
        var condition = new Condition();
        condition.setRequestCount(conditionsArray[i].requestCount);
        condition.setUnitTime(conditionsArray[i].unitTime);
        condition.setTimeUnit(conditionsArray[i].timeUnit);
        condition.setStartingIP(conditionsArray[i].startingIP);
        condition.setEndingIP(conditionsArray[i].endingIP);
        condition.setHttpVerb(conditionsArray[i].httpVerb);
        conditions.add(condition);
    }
    policy.setConditions(conditions);

    return policy;
}
%>

